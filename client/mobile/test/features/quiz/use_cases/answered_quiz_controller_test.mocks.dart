// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_app_template/test/features/quiz/use_cases/answered_quiz_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:flutter_app_template/core/repositories/firebase_auth/firebase_auth_repository.dart'
    as _i8;
import 'package:flutter_app_template/core/repositories/firestore/document.dart'
    as _i3;
import 'package:flutter_app_template/core/repositories/firestore/document_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWriteBatch_0 extends _i1.SmartFake implements _i2.WriteBatch {
  _FakeWriteBatch_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocument_1<T1 extends Object> extends _i1.SmartFake
    implements _i3.Document<T1> {
  _FakeDocument_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_3 extends _i1.SmartFake
    implements _i5.UserCredential {
  _FakeUserCredential_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DocumentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentRepository extends _i1.Mock
    implements _i6.DocumentRepository {
  @override
  _i2.WriteBatch get batch => (super.noSuchMethod(
        Invocation.getter(#batch),
        returnValue: _FakeWriteBatch_0(
          this,
          Invocation.getter(#batch),
        ),
        returnValueForMissingStub: _FakeWriteBatch_0(
          this,
          Invocation.getter(#batch),
        ),
      ) as _i2.WriteBatch);

  @override
  _i4.Future<void> save(
    String? documentPath, {
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [documentPath],
          {#data: data},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> update(
    String? documentPath, {
    required Map<String, dynamic>? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [documentPath],
          {#data: data},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i3.Document<T>> fetch<T extends Object>(
    String? documentPath, {
    _i2.Source? source = _i2.Source.serverAndCache,
    void Function(_i3.Document<T>?)? fromCache,
    required T Function(Map<String, dynamic>)? decode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [documentPath],
          {
            #source: source,
            #fromCache: fromCache,
            #decode: decode,
          },
        ),
        returnValue: _i4.Future<_i3.Document<T>>.value(_FakeDocument_1<T>(
          this,
          Invocation.method(
            #fetch,
            [documentPath],
            {
              #source: source,
              #fromCache: fromCache,
              #decode: decode,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Document<T>>.value(_FakeDocument_1<T>(
          this,
          Invocation.method(
            #fetch,
            [documentPath],
            {
              #source: source,
              #fromCache: fromCache,
              #decode: decode,
            },
          ),
        )),
      ) as _i4.Future<_i3.Document<T>>);

  @override
  _i4.Future<_i3.Document<T>> fetchCache<T extends Object>(
    String? documentPath, {
    required T Function(Map<String, dynamic>)? decode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCache,
          [documentPath],
          {#decode: decode},
        ),
        returnValue: _i4.Future<_i3.Document<T>>.value(_FakeDocument_1<T>(
          this,
          Invocation.method(
            #fetchCache,
            [documentPath],
            {#decode: decode},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Document<T>>.value(_FakeDocument_1<T>(
          this,
          Invocation.method(
            #fetchCache,
            [documentPath],
            {#decode: decode},
          ),
        )),
      ) as _i4.Future<_i3.Document<T>>);

  @override
  _i4.Future<_i3.Document<T>> fetchCacheOnly<T extends Object>(
    String? documentPath, {
    required T? Function(Map<String, dynamic>)? decode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCacheOnly,
          [documentPath],
          {#decode: decode},
        ),
        returnValue: _i4.Future<_i3.Document<T>>.value(_FakeDocument_1<T>(
          this,
          Invocation.method(
            #fetchCacheOnly,
            [documentPath],
            {#decode: decode},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Document<T>>.value(_FakeDocument_1<T>(
          this,
          Invocation.method(
            #fetchCacheOnly,
            [documentPath],
            {#decode: decode},
          ),
        )),
      ) as _i4.Future<_i3.Document<T>>);

  @override
  _i4.Future<bool> exists(String? documentPath) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [documentPath],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> existsCache(String? documentPath) => (super.noSuchMethod(
        Invocation.method(
          #existsCache,
          [documentPath],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>> snapshots(
          String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [documentPath],
        ),
        returnValue:
            _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>.empty(),
      ) as _i4.Stream<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> remove(String? documentPath) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [documentPath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T> transaction<T>(_i2.TransactionHandler<T>? transactionHandler) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [transactionHandler],
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [transactionHandler],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #transaction,
                [transactionHandler],
              ),
            ),
        returnValueForMissingStub: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [transactionHandler],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_2<T>(
              this,
              Invocation.method(
                #transaction,
                [transactionHandler],
              ),
            ),
      ) as _i4.Future<T>);
}

/// A class which mocks [FirebaseAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthRepository extends _i1.Mock
    implements _i8.FirebaseAuthRepository {
  @override
  _i4.Stream<_i5.User?> get onAuthStateChanged => (super.noSuchMethod(
        Invocation.getter(#onAuthStateChanged),
        returnValue: _i4.Stream<_i5.User?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.User?>.empty(),
      ) as _i4.Stream<_i5.User?>);

  @override
  _i4.Stream<_i5.User?> get onUserChanged => (super.noSuchMethod(
        Invocation.getter(#onUserChanged),
        returnValue: _i4.Stream<_i5.User?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.User?>.empty(),
      ) as _i4.Stream<_i5.User?>);

  @override
  bool get isAnonymously => (super.noSuchMethod(
        Invocation.getter(#isAnonymously),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isEmailVerified => (super.noSuchMethod(
        Invocation.getter(#isEmailVerified),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<String?> get idToken => (super.noSuchMethod(
        Invocation.getter(#idToken),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<_i5.UserCredential> signInWithAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInWithAnonymously,
          [],
        ),
        returnValue: _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithAnonymously,
            [],
          ),
        )),
      ) as _i4.Future<_i5.UserCredential>);

  @override
  _i4.Future<_i5.UserCredential> signInWithAuthCredential(
          _i5.AuthCredential? authCredential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithAuthCredential,
          [authCredential],
        ),
        returnValue: _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithAuthCredential,
            [authCredential],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithAuthCredential,
            [authCredential],
          ),
        )),
      ) as _i4.Future<_i5.UserCredential>);

  @override
  _i4.Future<_i5.UserCredential> createUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i5.UserCredential>);

  @override
  _i4.Future<_i5.UserCredential> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i5.UserCredential>);

  @override
  _i4.Future<void> sendEmailVerification() => (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendPasswordResetEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> changeEmailPassword({
    required String? email,
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeEmailPassword,
          [],
          {
            #email: email,
            #oldPassword: oldPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.UserCredential> signInWithLink(
          _i5.AuthCredential? authCredential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithLink,
          [authCredential],
        ),
        returnValue: _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithLink,
            [authCredential],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithLink,
            [authCredential],
          ),
        )),
      ) as _i4.Future<_i5.UserCredential>);

  @override
  _i4.Future<String?> getIdToken({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdToken,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<_i5.IdTokenResult?> getIdTokenResult(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdTokenResult,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i4.Future<_i5.IdTokenResult?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.IdTokenResult?>.value(),
      ) as _i4.Future<_i5.IdTokenResult?>);

  @override
  _i4.Future<Map<String, dynamic>?> getClaim({bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getClaim,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<void> userDelete(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #userDelete,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
